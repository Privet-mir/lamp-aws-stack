name: Terraform CI

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:
    inputs:
      action:
        description: "Action to run (apply/destroy)"
        required: true
        default: apply
        type: choice
        options:
          - apply
          - destroy

env:
  TF_IN_AUTOMATION: "true"
  TF_INPUT: "false"
  TF_CLI_ARGS: "-no-color"
  AWS_REGION: "${{ secrets.AWS_REGION }}"
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: ${{ vars.TERRAFORM_VERSION || '1.10.0' }}

permissions:
  id-token: write
  contents: read

jobs:
  backend_init:
    name: Backend init (S3 bucket)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        if: ${{ env.AWS_ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure AWS credentials (Access Keys)
        if: ${{ env.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Ensure backend S3 bucket exists
        shell: bash
        run: |
          set -euo pipefail
          export AWS_PAGER=""
          export AWS_CLI_AUTO_PROMPT=off
          # Prefer env bucket var if provided, fall back to tfvars, then default
          BACKEND_BUCKET_NAME="${BACKEND_BUCKET_NAME:-}"
          if [ -z "${BACKEND_BUCKET_NAME}" ] && [ -f terraform.tfvars ]; then
            BACKEND_BUCKET_NAME=$(awk -F'=' '/backend_bucket_name/ {gsub(/"|'\''| /, "", $2); print $2}' terraform.tfvars || true)
          fi
          if [ -z "${BACKEND_BUCKET_NAME}" ]; then BACKEND_BUCKET_NAME="assesment-sfeh123rasf1sdfa111"; fi
          REGION="${AWS_REGION:-eu-central-1}"
          echo "Using region: ${REGION}"
          echo "Checking/creating S3 bucket: ${BACKEND_BUCKET_NAME}"
          if ! aws s3api head-bucket --bucket "${BACKEND_BUCKET_NAME}" 2>/dev/null; then
            if [ "${REGION}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "${BACKEND_BUCKET_NAME}" --region "${REGION}"
            else
              aws s3api create-bucket --bucket "${BACKEND_BUCKET_NAME}" --region "${REGION}" --create-bucket-configuration LocationConstraint="${REGION}"
            fi
            aws s3api put-bucket-versioning --bucket "${BACKEND_BUCKET_NAME}" --versioning-configuration Status=Enabled
            aws s3api put-bucket-encryption --bucket "${BACKEND_BUCKET_NAME}" --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          else
            echo "Bucket already exists: ${BACKEND_BUCKET_NAME}"
          fi
  validate:
    name: Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            .terraform
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-
      - name: Terraform fmt
        run: |
          terraform fmt -recursive
          terraform fmt -check -recursive
      - name: Terraform validate
        run: |
          terraform init -backend=false
          terraform validate

  plan:
    name: Plan
    runs-on: ubuntu-latest
    needs: [backend_init, validate]
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform init
        run: terraform init
      - name: Terraform plan
        run: terraform plan -out=tfplan
      - name: Export plan to JSON
        run: terraform show -json tfplan > tfplan.json
      - name: Install conftest
        shell: bash
        run: |
          set -euo pipefail
          CONFTEST_VERSION="0.53.0"
          curl -sSL -o conftest.tar.gz "https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz"
          tar -xzf conftest.tar.gz
          sudo mv conftest /usr/local/bin/
          conftest --version
      - name: OPA policy check - block destroys
        run: conftest test tfplan.json -p policy/opa
      - name: Show plan
        run: terraform show -no-color tfplan > plan.txt
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            tfplan
            plan.txt
            .terraform.lock.hcl

  apply:
    name: Apply
    runs-on: ubuntu-latest
    needs: plan
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && inputs.action == 'apply')
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform init
        run: terraform init
      - name: Terraform plan (apply job)
        run: terraform plan -out=tfplan
      - name: Terraform apply
        run: terraform apply -auto-approve tfplan
      - name: Export outputs
        run: terraform output -json > tf-outputs.json || true
      - name: Upload outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: tf-outputs.json

  destroy:
    name: Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && inputs.action == 'destroy'
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      - name: Configure AWS credentials (Access Keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Terraform init
        run: terraform init
      - name: Terraform destroy
        run: terraform destroy -auto-approve


